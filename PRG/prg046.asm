; Super Mario Bros. 3Mix by Southbird 2014
; For more info, see http://www.sonicepoch.com/sm3mix/
;
; PLEASE INCLUDE A CREDIT TO THE SOUTHBIRD DISASSEMBLY
; AND THE ABOVE LINK SOMEWHERE IN YOUR WORKS :)
;
; Original disassembler source generated by DCC6502 version v1.4
; All 3Mix new code by Southbird!
; For more info about DCC6502, e-mail veilleux@ameth.org
;
; FILENAME: prg015.bin, File Size: 8193, ORG: $A000
;     -> NES mode enabled
;---------------------------------------------------------------------------
Tile_Layout_TS16:
	; This defines the individual 8x8 blocks used to construct one of the tiles
	; Referenced by Address_Per_Tileset, addressed by Level_Tileset
	; Stored by upper left, then lower left, then upper right, then lower right

	; Remember that palette is determined by the upper 2 bits of a TILE (not the PATTERN)
	; I.e. tiles starting at index $00, $40, $80, $C0 are each on that respective palette

	; Upper left 8x8 pattern per tile
	.byte $55, $DC, $FF, $05, $05, $E8, $05, $26, $55, $75, $55, $56, $3E, $2E, $2C, $3C ; Tiles $00 - $0F
	.byte $4C, $FC, $FC, $4E, $70, $42, $33, $FC, $41, $42, $33, $FC, $10, $FD, $14, $62 ; Tiles $10 - $1F
	.byte $51, $6C, $5C, $5E, $6E, $50, $01, $63, $55, $1C, $1E, $0E, $FF, $FF, $B8, $B8 ; Tiles $20 - $2F
	.byte $B8, $B8, $BC, $00, $10, $01, $04, $FC, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $30 - $3F
	.byte $DC, $05, $FC, $FC, $05, $05, $FF, $26, $56, $55, $44, $75, $75, $56, $FF, $FC ; Tiles $40 - $4F
	.byte $F4, $F4, $F4, $68, $16, $55, $55, $55, $44, $75, $56, $44, $FF, $FF, $FF, $D8 ; Tiles $50 - $5F
	.byte $98, $98, $98, $98, $98, $98, $92, $B4, $B4, $B4, $B4, $B4, $B4, $B4, $B4, $B4 ; Tiles $60 - $6F
	.byte $B4, $B8, $98, $98, $98, $98, $A4, $EC, $E4, $C0, $D5, $B2, $E9, $68, $24, $FF ; Tiles $70 - $7F
	.byte $28, $28, $67, $55, $FF, $C4, $50, $26, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $80 - $8F
	.byte $67, $67, $56, $55, $67, $67, $55, $75, $FF, $05, $01, $63, $55, $1C, $1E, $55 ; Tiles $90 - $9F
	.byte $62, $51, $6C, $5C, $5E, $6E, $FF, $FF, $FF, $FF, $47, $30, $30, $8C, $8E, $8C ; Tiles $A0 - $AF
	.byte $8E, $8C, $8E, $8C, $8E, $09, $09, $07, $30, $31, $AC, $AE, $B8, $FF, $FF, $FF ; Tiles $B0 - $BF
	.byte $05, $05, $05, $27, $FC, $FC, $FC, $03, $3C, $3C, $3C, $3D, $FC, $26, $3C, $FC ; Tiles $C0 - $CF
	.byte $44, $45, $46, $48, $48, $FF, $07, $05, $30, $80, $82, $C5, $C7, $D4, $FE, $FC ; Tiles $D0 - $DF
	.byte $AA, $AB, $FE, $01, $3A, $FE, $4A, $6A, $FE, $2B, $51, $6C, $5C, $5E, $6E, $FF ; Tiles $E0 - $EF
	.byte $0E, $D7, $E0, $05, $01, $62, $0A, $66, $01, $62, $FF, $FF, $F1, $48, $F8, $FF ; Tiles $F0 - $FF

	; Lower left 8x8 pattern per tile
	.byte $65, $DD, $FF, $06, $D6, $E9, $14, $36, $45, $65, $65, $66, $FC, $3E, $3C, $FC ; Tiles $00 - $0F
	.byte $5C, $4C, $4E, $5E, $43, $FC, $52, $32, $43, $FC, $31, $32, $20, $21, $21, $72 ; Tiles $10 - $1F
	.byte $61, $65, $6C, $6E, $7E, $60, $03, $73, $1C, $2C, $2E, $1E, $FF, $FF, $B9, $B9 ; Tiles $20 - $2F
	.byte $B9, $B9, $BD, $10, $10, $FD, $04, $FC, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $30 - $3F
	.byte $DD, $06, $FC, $FC, $06, $06, $FF, $36, $74, $45, $66, $65, $45, $66, $FF, $FC ; Tiles $40 - $4F
	.byte $F5, $F5, $F5, $78, $65, $65, $06, $65, $74, $45, $74, $66, $FF, $FF, $FF, $D9 ; Tiles $50 - $5F
	.byte $99, $99, $99, $99, $99, $99, $93, $B5, $B5, $B5, $B5, $B5, $B5, $B5, $B5, $B5 ; Tiles $60 - $6F
	.byte $B5, $B9, $99, $99, $99, $99, $A5, $ED, $E4, $C1, $B2, $B2, $E8, $78, $34, $FF ; Tiles $70 - $7F
	.byte $28, $38, $65, $77, $FF, $C4, $51, $36, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $80 - $8F
	.byte $66, $65, $77, $77, $45, $65, $77, $77, $FF, $60, $FD, $62, $1C, $2C, $2E, $1E ; Tiles $90 - $9F
	.byte $65, $61, $65, $6C, $6E, $65, $FF, $FF, $FF, $FF, $57, $41, $41, $9C, $9E, $9C ; Tiles $A0 - $AF
	.byte $9E, $9C, $9E, $9C, $9E, $19, $19, $17, $40, $41, $AC, $AE, $B9, $FF, $FF, $FF ; Tiles $B0 - $BF
	.byte $5B, $06, $06, $06, $FC, $06, $FC, $35, $37, $37, $16, $5B, $FC, $36, $16, $FC ; Tiles $C0 - $CF
	.byte $44, $45, $48, $48, $4A, $FF, $FF, $E6, $32, $90, $92, $FE, $FE, $FE, $FE, $FE ; Tiles $D0 - $DF
	.byte $AB, $AB, $3B, $03, $73, $4A, $2C, $2E, $6A, $FE, $61, $FE, $6C, $6E, $FE, $FF ; Tiles $E0 - $EF
	.byte $64, $06, $E1, $06, $60, $62, $5A, $66, $60, $62, $FF, $FF, $F0, $58, $F9, $FF ; Tiles $F0 - $FF

	; Upper right 8x8 pattern per tile	
	.byte $55, $DE, $FF, $FF, $FF, $EA, $FF, $27, $55, $75, $54, $55, $3F, $2F, $2D, $3D ; Tiles $00 - $0F
	.byte $4D, $FC, $FC, $4F, $43, $73, $FC, $32, $43, $40, $FC, $32, $FD, $12, $14, $52 ; Tiles $10 - $1F
	.byte $61, $6D, $5D, $5F, $6F, $60, $01, $53, $0D, $1D, $1F, $55, $FF, $FF, $BA, $BA ; Tiles $20 - $2F
	.byte $BA, $BA, $BE, $01, $13, $02, $12, $FC, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $30 - $3F
	.byte $DE, $FF, $FC, $FC, $FF, $FF, $FF, $27, $55, $54, $75, $46, $75, $54, $FF, $37 ; Tiles $40 - $4F
	.byte $F6, $F6, $F6, $69, $55, $15, $55, $55, $75, $46, $54, $46, $FF, $FF, $FF, $DA ; Tiles $50 - $5F
	.byte $9A, $9A, $9A, $9A, $9A, $9A, $CA, $B6, $B6, $B6, $B6, $B6, $B6, $B6, $B6, $B6 ; Tiles $60 - $6F
	.byte $B6, $BA, $9A, $9A, $9A, $9A, $A6, $EE, $E5, $C2, $D5, $B2, $EB, $69, $25, $FF ; Tiles $70 - $7F
	.byte $29, $29, $55, $77, $FF, $C6, $56, $27, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $80 - $8F
	.byte $55, $54, $77, $77, $55, $75, $77, $77, $FF, $60, $01, $53, $56, $1D, $1F, $56 ; Tiles $90 - $9F
	.byte $52, $61, $6D, $5D, $5F, $6F, $FF, $FF, $FF, $FF, $30, $30, $47, $8D, $8F, $8D ; Tiles $A0 - $AF
	.byte $8F, $8D, $8F, $8D, $8F, $0A, $0A, $08, $30, $31, $AD, $AF, $BA, $FF, $FF, $FF ; Tiles $B0 - $BF
	.byte $FF, $FF, $26, $FF, $FF, $FC, $FC, $37, $04, $37, $37, $3D, $3D, $27, $04, $37 ; Tiles $C0 - $CF
	.byte $44, $45, $47, $49, $49, $FF, $08, $FF, $31, $81, $83, $C5, $C7, $D4, $FE, $FC ; Tiles $D0 - $DF
	.byte $AA, $AB, $3B, $01, $FE, $FE, $4B, $6B, $FE, $52, $61, $6D, $5D, $5F, $6F, $FF ; Tiles $E0 - $EF
	.byte $67, $D7, $E2, $FF, $01, $63, $01, $63, $0B, $0D, $FF, $FF, $F3, $49, $FA, $FF ; Tiles $F0 - $FF

	; Lower right 8x8 pattern per tile
	.byte $65, $DF, $FF, $FF, $D6, $EB, $15, $37, $45, $65, $64, $65, $FC, $3F, $3D, $FC ; Tiles $00 - $0F
	.byte $5D, $4D, $4F, $5F, $FC, $42, $33, $51, $FC, $42, $33, $30, $21, $22, $21, $62 ; Tiles $10 - $1F
	.byte $71, $7D, $6D, $6F, $65, $70, $03, $63, $1D, $2D, $2F, $1F, $FF, $FF, $BB, $BB ; Tiles $20 - $2F
	.byte $BB, $BB, $BF, $FD, $13, $12, $12, $FC, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $30 - $3F
	.byte $DF, $FF, $FC, $FC, $FF, $FF, $FF, $37, $45, $76, $65, $64, $45, $64, $FF, $34 ; Tiles $40 - $4F
	.byte $F7, $F7, $F7, $79, $65, $65, $65, $05, $45, $76, $76, $64, $FF, $FF, $FF, $DB ; Tiles $50 - $5F
	.byte $9B, $9B, $9B, $9B, $9B, $9B, $CB, $B7, $B7, $B7, $B7, $B7, $B7, $B7, $B7, $B7 ; Tiles $60 - $6F
	.byte $B7, $BB, $9B, $9B, $9B, $9B, $A7, $EF, $E5, $C3, $B2, $B2, $EA, $79, $35, $FF ; Tiles $70 - $7F
	.byte $29, $39, $67, $65, $FF, $C6, $57, $37, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; Tiles $80 - $8F
	.byte $67, $67, $65, $64, $67, $67, $45, $65, $FF, $61, $FD, $63, $1D, $2D, $2F, $1F ; Tiles $90 - $9F
	.byte $62, $66, $66, $6D, $6F, $66, $FF, $FF, $FF, $FF, $41, $41, $57, $9D, $9F, $9D ; Tiles $A0 - $AF
	.byte $9F, $9D, $9F, $9D, $9F, $1A, $1A, $18, $40, $41, $AD, $AF, $BB, $FF, $FF, $FF ; Tiles $B0 - $BF
	.byte $FF, $FF, $FF, $FF, $FF, $FF, $FF, $3C, $36, $3C, $34, $3D, $3D, $37, $25, $34 ; Tiles $C0 - $CF
	.byte $44, $45, $49, $49, $4B, $FF, $FF, $E7, $33, $91, $93, $FE, $FE, $FE, $FE, $FE ; Tiles $D0 - $DF
	.byte $AB, $AB, $70, $03, $3A, $4B, $2D, $2F, $6B, $2B, $FE, $FE, $6D, $6F, $FE, $FF ; Tiles $E0 - $EF
	.byte $65, $FF, $E3, $FF, $61, $63, $61, $63, $0C, $0D, $FF, $FF, $F2, $59, $FB, $FF ; Tiles $F0 - $FF

Tile_Attributes_TS16:
	.byte $1C, $5F, $99, $E2, $2E, $5F, $A6, $F0 ; $0400 - $0407


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_TS16
;
; Entry point for loading level layout data for Level_Tileset = 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_TS16:

	; Clear Tile memory
	LDY #$00

PRG046_LevelLoad_loop:	 
	LDA #TILE16_BG			; Set everything to sewer background
	JSR Tile_Mem_ClearB
	JSR Tile_Mem_ClearA
	CPY #$f0
	BNE PRG046_LevelLoad_loop

	JMP LevelLoad			; Begin actual level loading!


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Generator_TS16
;
; Based on the values in Temp_Var15 and LL_ShapeDef, chooses an
; appropriate generator function to builds this piece of the
; level.  Tedious, but saves space and is paper-design friendly.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRG046_A419:
	.byte 0, 15, 30, 45, 60, 75, 90, 105

LoadLevel_Generator_TS16:
	; From level loader function:
	; * Temp_Var15, Temp_Var16, and LL_ShapeDef are three bytes read from the data

	LDA <Temp_Var15
	AND #%11100000
	LSR A		
	LSR A		
	LSR A		
	LSR A		
	LSR A		
	TAX		 	; X = upper 3 bits of Temp_Var15 (0-7) (selects a multiple of 15 as the base)

	LDA LL_ShapeDef
	LSR A	
	LSR A	
	LSR A	
	LSR A			; A = upper 4 bits of LL_ShapeDef shifted down
	ADD PRG046_A419,X	; Add multiple of 15
	TAX
	DEX
	TXA		 ; A = ((LL_ShapeDef >> 4) + PRG046_A419[X]) - 1


	; Regular Generators
	JSR DynJump

	.word LoadLevel_Slope45T2B		;  0 - Above ground (UG only) 45 degree slope top-to-bottom
	.word LoadLevel_Slope45B2T		;  1 - Above ground (UG only) 45 degree slope bottom-to-top
	.word LoadLevel_Slope45T2BCeiling	;  2 - Above ground (UG only) 45 degree ceiling slope top-to-bottom
	.word LoadLevel_Slope45B2TCeiling	;  3 - Above ground (UG only) 45 degree ceiling slope bottom-to-top
	.word LoadLevel_Slope45T2B		;  4 - Underground/Hills normal 45 degree slope top-to-bottom
	.word LoadLevel_Slope45B2T		;  5 - Underground/Hills normal 45 degree slope bottom-to-top
	.word LoadLevel_Slope45T2BCeiling	;  6 - Underground/Hills normal 45 degree ceiling slope top-to-bottom
	.word LoadLevel_Slope45B2TCeiling	;  7 - Underground/Hills normal 45 degree ceiling slope bottom-to-top
	.word LoadLevel_Slope45T2B		;  8 - Underwater 45 degree slope top-to-bottom
	.word LoadLevel_Slope45B2T		;  9 - Underwater 45 degree slope bottom-to-top
	.word LoadLevel_Slope45T2BCeiling	; 10 - Underwater 45 degree ceiling slope top-to-bottom
	.word LoadLevel_Slope45B2TCeiling	; 11 - Underwater 45 degree ceiling slope bottom-to-top
	.word $0000		; 12 - Action Switch
	.word $0000		; 13 - Run of the clouds
	.word $0000		; 14 - Same as 9, except underwater ground tiles instead
	.word LoadLevel_BlockRun		; 15 - Run of bricks
	.word LoadLevel_BlockRun		; 16 - Run of '?' blocks with a coin
	.word LoadLevel_BlockRun		; 17 - Run of bricks with a coin
	.word LoadLevel_BlockRun		; 18 - Run of wood blocks
	.word LoadLevel_BlockRun		; 19 - Run of green note blocks (?)
	.word LoadLevel_BlockRun		; 20 - Run of note blocks
	.word LoadLevel_BlockRun		; 21 - Run of bouncing wood blocks
	.word LoadLevel_BlockRun		; 22 - Run of coins
	.word LoadLevel_VGroundPipeRun		; 23 - Vertical ground pipe 1 (alt level)
	.word LoadLevel_VGroundPipeRun		; 24 - Vertical ground pipe 2 (Big [?] area)
	.word LoadLevel_VGroundPipeRun		; 25 - Vertical ground pipe 3 (no entrance)
	.word LoadLevel_VCeilingPipeRun		; 26 - Vertical ceiling pipe 1 (alt level)
	.word LoadLevel_VCeilingPipeRun		; 27 - Vertical ceiling pipe 2 (no entrance)
	.word LoadLevel_HRightWallPipeRun	; 28 - Horizontal right-hand wall pipe (alt level)
	.word LoadLevel_HRightWallPipeRun	; 29 - Horizontal right-hand wall pipe (no entrance)
	.word LoadLevel_HLeftWallPipeRun	; 30 - Horizontal left-hand wall pipe (alt level)
	.word LoadLevel_HLeftWallPipeRun	; 31 - Horizontal left-hand wall pipe (no entrance)
	.word LoadLevel_Cannon			; 32 - Bullet bill cannon
	.word LoadLevel_CCBridge		; 33 - Cheep-Cheep style 'oo' bridge
	.word LoadLevel_CCBridge		; 34 - Would result in empty tiles?  (form of 33)
	.word LoadLevel_TopDecoBlocks		; 35 - Top-Deco Rectangle Waterfall
	.word LoadLevel_TopDecoBlocks		; 36 - Top-Deco Rectangle Left waving water pool
	.word LoadLevel_TopDecoBlocks		; 37 - Top-Deco Rectangle No current waving water pool
	.word LoadLevel_TopDecoBlocks		; 38 - Top-Deco Rectangle Right waving water pool
	.word LoadLevel_TopDecoBlocks		; 39 - Top-Deco Rectangle Water wrong-way BG
	.word LoadLevel_TopDecoBlocks		; 40 - Top-Deco Rectangle Diamond blocks (not really any deco on top)
	.word LoadLevel_TopDecoBlocks		; 41 - Top-Deco Rectangle Sand ground 
	.word LoadLevel_TopDecoBlocks		; 42 - Top-Deco Rectangle orange block??
	.word LoadLevel_TopDecoBlocks		; 43 - Top-Deco Rectangle Haunting BG Brick 1
	.word LoadLevel_TopDecoBlocks		; 44 - Top-Deco Rectangle Haunting BG Brick 2
	.word LoadLevel_Slope225T2B		; 45 - Above ground (UG only) 22.5 degree slope top-to-bottom
	.word LoadLevel_Slope225B2T		; 46 - Above ground (UG only) 22.5 degree slope bottom-to-top
	.word LoadLevel_Slope225T2BCeiling	; 47 - Above ground (UG only) 22.5 degree ceiling slope top-to-bottom
	.word LoadLevel_Slope225B2TCeiling	; 47 - Above ground (UG only) 22.5 degree ceiling slope bottom-to-top
	.word LoadLevel_Slope225T2B		; 49 - Underground/Hills normal 22.5 degree slope top-to-bottom
	.word LoadLevel_Slope225B2T		; 50 - Underground/Hills normal 22.5 degree slope bottom-to-top
	.word LoadLevel_Slope225T2BCeiling	; 51 - Underground/Hills normal 22.5 degree ceiling slope top-to-bottom
	.word LoadLevel_Slope225B2TCeiling	; 52 - Underground/Hills normal 22.5 degree ceiling slope bottom-to-top
	.word LoadLevel_Slope225T2B		; 53 - Underwater 22.5 degree slope top-to-bottom
	.word LoadLevel_Slope225B2T		; 54 - Underwater 22.5 degree slope bottom-to-top
	.word LoadLevel_Slope225T2BCeiling	; 55 - Underwater 22.5 degree ceiling slope top-to-bottom
	.word LoadLevel_Slope225B2TCeiling	; 56 - Underwater 22.5 degree ceiling slope bottom-to-top
	.word LoadLevel_Munchers46			; 57 - Run of munchers
	.word LoadLevel_PurpleCoins			; 58 - Run of Purple coins
	.word LoadLevel_PurpleCoinR			; 59 - Rectangle of Purple Coins
	.word LoadLevel_Munchers46_Upsidedown ; 60 - Run of upside down munchers
	.word LevelLoad_OnBlocks46			; 61 - Run of on blocks
	.word LevelLoad_OffBlocks46			; 62 - Run of off blocks
	.word LevelLoad_SwitchUpsideDown46  ; 63 - Run of upside down switches
	.word LevelLoad_CrumblingBlock46	; 64 - Run of crumbling blocks
	.word LoadLevel_Ground46	; 65 - Ground for the sewers
	.word LoadLevel_Ceiling46	; 66 - Ceiling for the sewers
	.word LevelLoad_LeftWall46	; 67 - Left wall for the sewers
	.word LevelLoad_RightWall46	; 68 - Right wall for the sewers
	.word LoadLevel_Wall46		; 69 - Wall for sewers
	.word LevelLoad_TopShadow46 	; 70
	.word LevelLoad_BottomShadow46  ; 71
	.word LevelLoad_LeftShadow46	; 72
	.word LevelLoad_RightShadow46	; 73
	.word LevelLoad_Pillar46	; 74 - Pillar for the sewers
	.word LevelLoad_TL_BR_CHAIN46	; 75 Chains from TL to BR
	.word LevelLoad_BL_TR_CHAIN46	; 76 Chains from BL to TR

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LeveLoad_FixedSizeGen_TS16
;
; Much simpler generators that are fixed-size, commonly used for 
; just single tile placement styles (although a couple relatively 
; complex ones exist in here as well)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LeveLoad_FixedSizeGen_TS16:
	; It is verified before calling this function that all of
	; the upper 4 bits of LL_ShapeDef are ZERO

	; So the upper 3 bits of Temp_Var15 serve as the most significant bits
	; to a value where LL_ShapeDef provide the 4 least significant bits

	LDA <Temp_Var15
	AND #%11100000
	LSR A		
	ADD LL_ShapeDef	
	TAX		 	; Resultant index is put into 'X'
	JSR DynJump	 

	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word LoadLevel_Corner46		;  0 - Above Ground upper-left corner tile
	.word LoadLevel_Corner46		;  1 - Underground/Hills normal upper-left corner tile
	.word LoadLevel_Corner46		;  2 - Underwater upper-left corner tile
	.word LoadLevel_Corner46		;  3 - Above Ground upper-right corner tile
	.word LoadLevel_Corner46		;  4 - Underground/Hills normal upper-right corner tile
	.word LoadLevel_Corner46		;  5 - Underwater upper-right corner tile
	.word LoadLevel_Corner46		;  6 - Above Ground lower-left corner tile
	.word LoadLevel_Corner46		;  7 - Underground/Hills normal lower-left corner tile
	.word LoadLevel_Corner46		;  8 - Underwater lower-left corner tile
	.word LoadLevel_Corner46		;  9 - Above Ground lower-right corner tile
	.word LoadLevel_Corner46		; 10 - Underground/Hills normal lower-right corner tile
	.word LoadLevel_Corner46		; 11 - Underwater lower-right corner tile
	.word LoadLevel_StarCoin1		; 12 - Star Coin 1
	.word LoadLevel_StarCoin2		; 13 - Star Coin 2
	.word LoadLevel_StarCoin3		; 14 - Star Coin 3
	.word LoadLevel_Door2			; 15 - Door style 2
	.word LoadLevel_PowerBlock		; 16 - ? block with flower
	.word LoadLevel_PowerBlock		; 17 - ? block with leaf 
	.word LoadLevel_PowerBlock		; 18 - ? block with star
	.word LoadLevel_PowerBlock		; 19 - ? block with coin OR star
	.word LoadLevel_PowerBlock		; 20 - ? block with coin (??)
	.word LoadLevel_PowerBlock		; 21 - Muncher Plant!
	.word LoadLevel_PowerBlock		; 22 - Brick with flower
	.word LoadLevel_PowerBlock		; 23 - Brick with leaf
	.word LoadLevel_PowerBlock		; 24 - Brick with star
	.word LoadLevel_PowerBlock		; 25 - Brick with coin OR star
	.word LoadLevel_PowerBlock		; 26 - Brick with 10-coin
	.word LoadLevel_PowerBlock		; 27 - Brick with 1-up
	.word LoadLevel_PowerBlock		; 28 - Brick with vine
	.word LoadLevel_PowerBlock		; 29 - Brick with P-Switch
	.word LoadLevel_PowerBlock		; 30 - Invisible coin
	.word LoadLevel_PowerBlock		; 31 - Invisible 1-up
	.word LoadLevel_PowerBlock		; 32 - Invisible note
	.word LoadLevel_PowerBlock		; 33 - Note block with flower
	.word LoadLevel_PowerBlock		; 34 - Note block with leaf
	.word LoadLevel_PowerBlock		; 35 - Note block with star
	.word LoadLevel_PowerBlock		; 36 - Wood block with flower
	.word LoadLevel_PowerBlock		; 37 - Wood block with leaf
	.word LoadLevel_PowerBlock		; 38 - Wood block with star
	.word LoadLevel_PowerBlock		; 39 - Invisible note to coin heaven
	.word LoadLevel_PowerBlock		; 40 - P-Switch
	.word LoadLevel_EndGoal			; 41 - The end goal
	.word LoadLevel_PipeRaiseHelper1	; 42 - Pipe Raise Helper 1
	.word LoadLevel_PipeRaiseHelper2	; 43 - Pipe Raise Helper 2
	.word LoadLevel_PipeRaiseHelper3	; 44 - Pipe Raise Helper 3
	.word LoadLevel_PipeRaiseHelper4	; 45 - Pipe Raise Helper 4
	.word LoadLevel_ActionSwitch		; 46 - Action Switch
	.word $0000
	.word DoubleBlocks				; 48 - Double blocks for the inside of the double wide slopes.
	.word DoubleBlocks
	.word DoubleBlocks
	.word DoubleBlocks

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_ActionSwitch46
;
; Places a single corner tile in sewer levels
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_ActionSwitch46: 
	LDY TileAddr_Off
	LDA TILEA_EXSWITCH	 ; Get switch
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Corner
;
; Places a single corner tile in sewer levels
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LL_Corners46:
	.byte TILE16_GROUNDTL, TILE16_INNER_TL2, TILE16_SLOPE_45_TL	; Upper left
	.byte TILE16_GROUNDTR, TILE16_INNER_TR2, TILE16_SLOPE_45_TR	; Upper right
	.byte TILE16_GROUNDBL, TILE16_INNER_BL2, TILE16_SLOPE_45_BL	; Lower left (not avail AG) 
	.byte TILE16_GROUNDBR, TILE16_INNER_BR2, TILE16_SLOPE_45_BR	; Lower right (not avail AG) 

LoadLevel_Corner46:
	LDX LL_ShapeDef		 ; LL_ShapeDef is limited 0-15 because of fixed size gen mode, so it's perfect! 
	LDY TileAddr_Off
	LDA LL_Corners46,X	 ; Get corner tile
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	RTS


DoubleBlocks:
	.byte TILE16_INNER_TL, TILE16_INNER_TL+1
	.byte TILE16_INNER_TR, TILE16_INNER_TR+1
	.byte TILE16_INNER_BL, TILE16_INNER_BL+1
	.byte TILE16_INNER_BR, TILE16_INNER_BR+1


; Two Block Generator
LoadLevel_DoubleBlock46:
	LDA LL_ShapeDef		; LL_ShapeDef is limited 0-15 because of fixed size gen mode, so it's perfect! 
	ASL A
	TAX

	LDY TileAddr_Off
	LDA DoubleBlocks,X	 ; Get first block
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column
	INX
	LDA DoubleBlocks,X	 ; Get second block
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; GenerateShading
;
; Generates shading for the sewer tileset.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GenerateShading:
	LDA [Map_Tile_AddrL], Y		; Get the block stored at the current location.
	STA <Temp_Var2

	; Save offset
	LDA TileAddr_Off
	STA <Temp_Var3

	; Save Address to contain issues.
	LDA Map_Tile_AddrL
	STA <Temp_Var4
	LDA Map_Tile_AddrH
	STA <Temp_Var5

	; Save X, Y to not overwrite it.
	TXA
	STA <Temp_Var6
	TYA
	STA <Temp_Var7

	JSR GenerateRightShading

	; Restore X, Y
	LDA <Temp_Var6
	TAX
	LDA <Temp_Var7
	TAY

	; Restore address
	LDA <Temp_Var4
	STA Map_Tile_AddrL
	LDA <Temp_Var5
	STA Map_Tile_AddrH

	; Restore offset
	LDA <Temp_Var3
	STA TileAddr_Off

	JSR GenerateLeftShading
	;JSR GenerateTopShading
	;JSR GenerateBottomShading

	; Restore X, Y
	LDA <Temp_Var6
	TAX
	LDA <Temp_Var7
	TAY

	; Restore address
	LDA <Temp_Var4
	STA Map_Tile_AddrL
	LDA <Temp_Var5
	STA Map_Tile_AddrH

	; Restore offset
	LDA <Temp_Var3
	STA TileAddr_Off

	RTS


GenerateLeftShadingBlocksToChange:
	.byte TILE16_BG
	.byte TILE16_SHADOW_TOP
	.byte TILE16_SHADOW_BTM
	.byte TILE16_SHADOW_RIGHT
	.byte TILE16_SHADOW_BL
	.byte TILE16_SHADOW_TL
	.byte TILE16_SHADOW_LEFT

EndGenerateLeftShadingBlocksToChange:

GenerateLeftShadingBlocksAlternative:
	.byte TILE16_SHADOW_LEFT
	.byte TILE16_SHADOW_TR
	.byte TILE16_SHADOW_BR
	.byte TILE16_SHADOW_LR
	.byte TILE16_SHADOW_TLR
	.byte TILE16_SHADOW_BLR
	.byte TILE16_SHADOW_LEFT

GenerateLeftShading:
	JSR UpdateBlockIndexToPriorColumn	; Get to the left column index.

	LDX #(EndGenerateLeftShadingBlocksToChange - GenerateLeftShadingBlocksToChange)

GenerateLeftShadingLoop:
		LDA [Map_Tile_AddrL], Y
		CMP GenerateLeftShadingBlocksToChange, X
		
		; If the not block equal, continue looping...
		BNE GenerateLeftShadingLoopContinue

			; Apply the alternative block to index and jump out of this method.
			LDA GenerateLeftShadingBlocksAlternative, X
			STA [Map_Tile_AddrL], Y
			JMP GenerateLeftShadingLoopFinish

	; Continue looping while X >= 0
GenerateLeftShadingLoopContinue:
		DEX

	BPL GenerateLeftShadingLoop	 	

GenerateLeftShadingLoopFinish:
	JMP UpdateBlockIndexToNextColumn	; Restore the column index.
	

GenerateRightShadingBlocksToChange:
	.byte TILE16_BG
	.byte TILE16_SHADOW_TOP
	.byte TILE16_SHADOW_BTM
	.byte TILE16_SHADOW_LEFT
	.byte TILE16_SHADOW_BR
	.byte TILE16_SHADOW_TR
	.byte TILE16_SHADOW_RIGHT

EndGenerateRightShadingBlocksToChange:

GenerateRightShadingBlocksAlternative:
	.byte TILE16_SHADOW_RIGHT
	.byte TILE16_SHADOW_TL
	.byte TILE16_SHADOW_BL
	.byte TILE16_SHADOW_LR
	.byte TILE16_SHADOW_TLR
	.byte TILE16_SHADOW_BLR
	.byte TILE16_SHADOW_RIGHT

GenerateRightShading:
	JSR UpdateBlockIndexToNextColumn	; Get to the right column index.

	LDX #(EndGenerateRightShadingBlocksToChange - GenerateRightShadingBlocksToChange)

GenerateRightShadingLoop:
		LDA [Map_Tile_AddrL], Y
		CMP GenerateRightShadingBlocksToChange, X
		
		; If the not block equal, continue looping...
		BNE GenerateRightShadingLoopContinue

			; Apply the alternative block to index and jump out of this method.
			LDA GenerateRightShadingBlocksAlternative, X
			STA [Map_Tile_AddrL], Y
			JMP GenerateRightShadingLoopFinish

	; Continue looping while X >= 0
GenerateRightShadingLoopContinue:
		DEX

	BPL GenerateRightShadingLoop	 	

GenerateRightShadingLoopFinish:
	JMP UpdateBlockIndexToPriorColumn	; Restore the column index.


UpdateBlockIndexToNextColumn:
	; Increment Y
	INY

	; Check if we hit a boundry.  If did not hit boundry, terminate.
	TYA
	AND #$0f
	BNE Terminate46

	; Add 0x01B0 to the index
	LDA <Map_Tile_AddrL
	ADD #$b0	 
	STA <Map_Tile_AddrL
	LDA <Map_Tile_AddrH
	ADC #$01	 
	STA <Map_Tile_AddrH

	; Get TileAddr_Off and only keep the row, but clear 'Y' lower bits since
	; we're going to column 0 on the same row, new screen...
	LDA TileAddr_Off
	AND #$f0
	TAY	

Terminate46:
	RTS


UpdateBlockIndexToPriorColumn:
	; Decrement Y
	DEY
	
	; Check if we hit a boundry.  If did not hit boundry, terminate.
	TYA		
	AND #$0f	
	CMP #$0f	
	BNE Terminate46	 

	; Subtract 0x01B0 to the index
	LDA <Map_Tile_AddrL
	SUB #$b0	 
	STA <Map_Tile_AddrL
	LDA <Map_Tile_AddrH
	SBC #$01	 
	STA <Map_Tile_AddrH

	; Transfer 'Y' to the other side
	INY	
	TYA	
	AND #$f0
	ORA #$0f
	TAY

	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; UpdateBlockIndexToNextRow
;
; Moves the index to the next column.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UpdateBlockIndexToNextRow:
	; Go to next column by adding 16 to tile offset
	TYA
	ADD #16
	TAY
	LDA <Map_Tile_AddrH
	ADC #$00	 
	STA <Map_Tile_AddrH
	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; UpdateBlockIndexToPriorRow
;
; Moves the index to the next column.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UpdateBlockIndexToPriorRow:
	; Go to next row by subtracting 16 to tile offset
	TYA
	SUB #16
	TAY	
	LDA <Map_Tile_AddrH
	SBC #$00	 
	STA <Map_Tile_AddrH
	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_Pillar46
;
; Creates a pillar.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_Pillar46:
	LDA #$00
	BEQ LevelLoad_TopMiddleBottomVerticle


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_TopMiddleBottomVerticle
;
; Loads a top, middle, and bottom for a vertical block.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TopMiddleBottomBlocks:
	.byte TILE16_PILLAR_T, TILE16_PILLAR_M, TILE16_PILLAR_B, $00
	.byte $00, $00, $00, $00


; Vertical Top Middle Bottom Block Run
LevelLoad_TopMiddleBottomVerticle:
	ASL A
	ASL A
	TAX				; The provided index * 4 will become the index into the blocks

	; Get the low block index
	LDY TileAddr_Off

	; Place the top block
	LDA TopMiddleBottomBlocks, X
	STA [Map_Tile_AddrL],Y

	; Generate shading for pillar
	JSR GenerateShading

	; Get ready to place middle block
	JSR UpdateBlockIndexToNextRow
	INX

	; Find the size 1-16 of the block run
	LDA LL_ShapeDef
	AND #$0f	 
	STA <Temp_Var1	
	

	; Place middle block 1-16 times.
	TopMiddleBottomVerticle_PlaceMiddleBlock46:
	
		; Place middle block
		LDA TopMiddleBottomBlocks, X
		STA [Map_Tile_AddrL],Y
		
		; Generate shading for pillar
		JSR GenerateShading

		JSR UpdateBlockIndexToNextRow

		DEC <Temp_Var1
	BPL TopMiddleBottomVerticle_PlaceMiddleBlock46	 	
	
	; Get ready to place bottom block
	INX
	
	; Place bottom block
	LDA TopMiddleBottomBlocks, X
	STA [Map_Tile_AddrL],Y

	; Generate shading for pillar
	JSR GenerateShading
	
	RTS



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_TopShadow46
;
; Puts down 1-16 top shadows
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_TopShadow46:
	LDA #TILE16_SHADOW_TOP
	BNE LLM46_SeTTile


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_BottomShadow46
;
; Puts down 1-16 bottom shadows
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_BottomShadow46:
	LDA #TILE16_SHADOW_BTM
	BNE LLM46_SeTTile


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Ground
;
; Puts down 1-16 ground
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_Ground46:
	LDA #TILE16_GROUNDTM
	BNE LLM46_SeTTile


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Ceiling
;
; Puts down 1-16 ceiling
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_Ceiling46:
	LDA #TILE16_GROUNDBM
	BNE LLM46_SeTTile


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Munchers
;
; Puts down 1-16 munchers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_Munchers46:
	LDA #TILEA_MUNCHER
	BNE LLM46_SeTTile

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Munchers15_Upsidedown
;
; Puts down 1-16 munchers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_Munchers46_Upsidedown:
	LDA #TILEA_UPSIDEDOWN_MUNCHER
	BNE LLM46_SeTTile

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_OnBlocks46
;
; Puts down 1-16 on blocks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_OnBlocks46:
	LDA #TILEA_ON_BLOCK
	BNE LLM46_SeTTile

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_OffBlocks46
;
; Puts down 1-16 on blocks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_OffBlocks46:
	LDA #TILEA_OFF_BLOCK
	BNE LLM46_SeTTile

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_SwitchUpsideDown46
;
; Puts down 1-16 on blocks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_SwitchUpsideDown46:
	LDA #TILEA_EXSWITCHR
	BNE LLM46_SeTTile


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_SwitchUpsideDown46
;
; Puts down 1-16 on blocks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_CrumblingBlock46:
	LDA #TILEA_CRUMBLINGBLOCK
	BNE LLM46_SeTTile

; Horizontal Block Run
LLM46_SeTTile:
	STA <Temp_Var5

	LDA LL_ShapeDef	
	AND #$0f	
	TAX		 ; Temp_Var4 = lower 4 bits of LL_ShapeDef
	LDY TileAddr_Off	 ; Y = TileAddr_Off

PRG046_A6DD:
	LDA <Temp_Var5
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column
	DEX		 	 ; X--
	BPL PRG046_A6DD	 	 ; While X >= 0, loop!

	RTS		 ; Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_LeftShadow46
;
; Puts down 1-16 left shadows
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_LeftShadow46:
	LDA #TILE16_SHADOW_LEFT
	BNE LLM46_SeTTileV


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_RightShadow46
;
; Puts down 1-16 left walls
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_RightShadow46:
	LDA #TILE16_SHADOW_RIGHT
	BNE LLM46_SeTTileV


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_LeftWall46
;
; Puts down 1-16 left walls
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_LeftWall46:
	LDA #TILE16_GROUNDML
	BNE LLM46_SeTTileV


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_RightWall46
;
; Puts down 1-16 right walls
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_RightWall46:
	LDA #TILE16_GROUNDMR


; Vertical Block Run
LLM46_SeTTileV:
	STA <Temp_Var5

	LDA LL_ShapeDef
	PHA	 			 ; Save LL_ShapeDef
	AND #$0f	 
	STA <Temp_Var1	 ; Temp_Var1 = lower 4 bits of LL_ShapeDef
	PLA				 ; Restore LL_ShapeDef
	
	LDY TileAddr_Off 	; Y = TileAddr_Off

; Loop through the number of times defined by Temp_Var1 placing Temp_Var5 into level memory vertically.
PRG046_D811:
	; Store into tile mem
	LDA <Temp_Var5
	STA [Map_Tile_AddrL],Y	 

	JSR UpdateBlockIndexToNextRow

	; While Temp_Var1 >= 0, loop!
	DEC <Temp_Var1
	BPL PRG046_D811	 	
	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_TL_BR_CHAIN46
;
; Puts down 1-16 chains from top left to bottom right.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_TL_BR_CHAIN46ToChange:
	.byte TILE16_BG
	.byte TILE16_SHADOW_RIGHT
	.byte TILE16_SHADOW_LEFT
	.byte TILE16_SHADOW_BTM
	.byte TILE16_SHADOW_TOP

EndLevelLoad_TL_BR_CHAIN46:

LevelLoad_TL_BR_CHAIN46Alternative:
	.byte TILE16_TL_BR_CHAIN
	.byte TILE16_TL_BR_BL_CHAIN
	.byte TILE16_TL_BR_TR_CHAIN
	.byte TILE16_TL_BR_TR_CHAIN2
	.byte TILE16_TL_BR_BL_CHAIN2

LevelLoad_TL_BR_CHAIN46:
	LDA LL_ShapeDef
	PHA	 			 ; Save LL_ShapeDef
	AND #$0f	 
	STA <Temp_Var1	 ; Temp_Var1 = lower 4 bits of LL_ShapeDef
	PLA				 ; Restore LL_ShapeDef
	
	LDY TileAddr_Off 	; Y = TileAddr_Off

; Loop through the number of times defined by Temp_Var1 placing Temp_Var5 into level memory vertically.
Loop_LLM46_SeTTileTL_BR:
	; Store into tile mem

	LDA [Map_Tile_AddrL],Y	 
	LDX #(EndLevelLoad_TL_BR_CHAIN46 - LevelLoad_TL_BR_CHAIN46ToChange)

Loop_LLM46_SeTTileTL_BRLoop:
		LDA [Map_Tile_AddrL], Y
		CMP LevelLoad_TL_BR_CHAIN46ToChange, X
		
		; If the not block equal, continue looping...
		BNE LLM46_SeTTileTL_BRLoopLoopContinue

			; Apply the alternative block to index and jump out of this method.
			LDA LevelLoad_TL_BR_CHAIN46Alternative, X
			STA [Map_Tile_AddrL], Y
			JMP LLM46_SeTTileTL_BRLoopLoopFinish

	; Continue looping while X >= 0
LLM46_SeTTileTL_BRLoopLoopContinue:
		DEX

	BPL Loop_LLM46_SeTTileTL_BRLoop
	LDA TILE16_TL_BR_CHAIN
	STA [Map_Tile_AddrL],Y	 

LLM46_SeTTileTL_BRLoopLoopFinish:
	JSR UpdateBlockIndexToNextRow
	JSR UpdateBlockIndexToNextColumn

	; While Temp_Var1 >= 0, loop!
	DEC <Temp_Var1
	BPL Loop_LLM46_SeTTileTL_BR	 	
	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LevelLoad_TL_BR_CHAIN46
;
; Puts down 1-16 chains from top left to bottom right.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LevelLoad_BL_TR_CHAIN46ToChange:
	.byte TILE16_BG
	.byte TILE16_SHADOW_RIGHT
	.byte TILE16_SHADOW_LEFT
	.byte TILE16_SHADOW_BTM
	.byte TILE16_SHADOW_TOP

EndLevelLoad_BL_TR_CHAIN46:

LevelLoad_BL_TR_CHAIN46Alternative:
	.byte TILE16_BL_TR_CHAIN
	.byte TILE16_BR_TL_TL_CHAIN
	.byte TILE16_BR_TL_BR_CHAIN  
	.byte TILE16_BR_TL_BR_CHAIN2
	.byte TILE16_BR_TL_TL_CHAIN2

LevelLoad_BL_TR_CHAIN46:
	LDA LL_ShapeDef
	PHA	 			 ; Save LL_ShapeDef
	AND #$0f	 
	STA <Temp_Var1	 ; Temp_Var1 = lower 4 bits of LL_ShapeDef
	PLA				 ; Restore LL_ShapeDef
	
	LDY TileAddr_Off 	; Y = TileAddr_Off

; Loop through the number of times defined by Temp_Var1 placing Temp_Var5 into level memory vertically.
Loop_LLM46_SeTTileBL_TR:
	LDA [Map_Tile_AddrL],Y	 
	LDX #(EndLevelLoad_BL_TR_CHAIN46 - LevelLoad_BL_TR_CHAIN46ToChange)

Loop_LLM46_SeTTileBL_TRLoop:
		LDA [Map_Tile_AddrL], Y
		CMP LevelLoad_BL_TR_CHAIN46ToChange, X
		
		; If the not block equal, continue looping...
		BNE LLM46_SeTTileBL_TRLoopLoopContinue

			; Apply the alternative block to index and jump out of this method.
			LDA LevelLoad_BL_TR_CHAIN46Alternative, X
			STA [Map_Tile_AddrL], Y
			JMP LLM46_SeTTileBL_TRLoopLoopFinish

	; Continue looping while X >= 0
LLM46_SeTTileBL_TRLoopLoopContinue:
		DEX

	BPL Loop_LLM46_SeTTileBL_TRLoop
	LDA TILE16_BL_TR_CHAIN
	STA [Map_Tile_AddrL],Y	 

LLM46_SeTTileBL_TRLoopLoopFinish:

	JSR UpdateBlockIndexToPriorRow
	JSR UpdateBlockIndexToNextColumn

	; While Temp_Var1 >= 0, loop!
	DEC <Temp_Var1
	BPL Loop_LLM46_SeTTileBL_TR 	
	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_Wall
;
; Puts down 1-256 wall blocks, up to 16 tiles tall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_Wall46:
	LDX #$01	 ; X = 1 (bright diamond blocks)
	BNE PRG046_A678	 ; Jump to PRG046_A678

LL_LargeGenerator46:
	.byte TILE16_GROUNDMM, TILE16_GROUNDMM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LoadLevel_SolidBrick46
;
; Puts down 1-256 solid bricks, up to 16 tiles tall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadLevel_SolidBrick46:
	LDX #$00	 ; X = 0 (solid brick)

PRG046_A678:
	JSR LL46_InitLongRun	 ; Get setup for long run

PRG046_A67B:
	LDA <Temp_Var3		 
	STA <Temp_Var5		 ; Temp_Var5 = Temp_Var3 (backup run width)

PRG046_A67F:
	LDA LL_LargeGenerator46,X	 ; Get appropriate tile
	STA [Map_Tile_AddrL],Y	 ; Store into tile mem
	JSR LoadLevel_NextColumn ; Next column
	DEC <Temp_Var5		 ; Temp_Var5-- (width decrement)

	LDA <Temp_Var5
	CMP #$ff
	BNE PRG046_A67F	 	; While Temp_Var5 >= 0, loop!

	JSR LL46_LongRunNextRow	 ; Go to next row
	DEC <Temp_Var4		 ; Temp_Var4-- (height decrement)
	BPL PRG046_A67B	 	; While Temp_Var4 >= 0, loop!
	RTS		 ; Return


	; This routine prepares for a long run of tiles by getting an additional
	; byte from the layout stream and preparing the Map_Tile_Addr backup
LL46_InitLongRun:
	LDY #$00	 ; Y = 0
	LDA [Level_LayPtr_AddrL],Y	 ; Get another byte from layout
	STA <Temp_Var3		 	; Store into Temp_Var3

	; Level_LayPtr_Addr++
	LDA <Level_LayPtr_AddrL
	ADD #$01	 
	STA <Level_LayPtr_AddrL
	LDA <Level_LayPtr_AddrH
	ADC #$00	 
	STA <Level_LayPtr_AddrH

	; Backup Map_Tile_AddrL/H into Temp_Var1/2
	LDA <Map_Tile_AddrL
	STA <Temp_Var1	
	LDA <Map_Tile_AddrH
	STA <Temp_Var2	

	LDA LL_ShapeDef	
	AND #$0f	
	STA <Temp_Var4		 ; Temp_Var4 = lower 4 bits of LL_ShapeDef
	LDY TileAddr_Off	 ; Y = TileAddr_Off
	RTS		 	; Return


	; This routine goes to the next row of the long run
LL46_LongRunNextRow:
	; Restore Map_Tile_Addr from backup
	LDA <Temp_Var1		 
	STA <Map_Tile_AddrL	
	LDA <Temp_Var2		
	STA <Map_Tile_AddrH	

	; Go to next row by adding 16 to tile offset
	LDA TileAddr_Off
	ADD #16
	STA TileAddr_Off
	TAY		
	LDA <Map_Tile_AddrH
	ADC #$00
	STA <Map_Tile_AddrH
	STA <Temp_Var2	 	; Update Map_Tile_AddrH backup
	RTS		 ; Return


	; Broken into another file for ease of integration in NoDice editor
	.include "PRG/levels/Sewers.asm"
